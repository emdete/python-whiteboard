#!/usr/bin/env python3
from time import sleep
from re import match
from os import listdir
from bluetooth import discover_devices
from linuxWiimoteLib import Wiimote

led_state = [False, ] * 4
rumble_state = False
wiimote = None

def button_callback(oldState, newState):
	print(newState.difference(oldState))
	new = ['A' in newState, 'B' in newState, 'One' in newState, 'Two' in newState, ]
	global led_state
	if new != led_state:
		led_state = new
		global wiimote
		wiimote.SetLEDs(*led_state)
	new = 'Home' in newState
	global rumble_state
	if new != rumble_state:
		rumble_state = new
		wiimote.SetRumble(rumble_state)

def ir_callback(px, py):
	print(px, py)

def main():
	print('press 1+2 / button to make discoverable')
	global wiimote
	wiimote = Wiimote()
	while not wiimote.running:
		try:
			devices = discover_devices(duration=10, lookup_names=True)
			print('found {} bt devices'.format(len(devices)))
			for device in devices:
				if match('.*nintendo.*', device[1].lower()):
					print('found {}, will connect.'.format(device[0]))
					wiimote.Connect(device)
					wiimote.SetRumble(True)
					sleep(.2)
					wiimote.SetRumble(False)
					wiimote.setButtonCallBack(button_callback)
					wiimote.setIRCallBack(ir_callback)
					wiimote.activate_IR(6)
					global led_state
					wiimote.SetLEDs(*led_state)
					print('battery={}'.format(wiimote.WiimoteState.Battery))
					break
		except OSError as e:
			print('bluetooth off?', e)
			for rfkill in listdir('/sys/class/rfkill'):
				with open('/sys/class/rfkill/' + rfkill + '/type') as f:
					_type = f.read().strip()
				if _type == 'bluetooth':
					with open('/sys/class/rfkill/' + rfkill + '/state') as f:
						state = int(f.read().strip())
					if not state:
						print('bluetooth is off!')
	try:
		while wiimote.running:
			sleep(1)
	finally:
		wiimote.Disconnect()

if __name__ == '__main__':
	from sys import argv
	main(*argv[1:])

